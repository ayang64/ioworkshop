Interfaces are a type that encode:

- Type
- Method Set
- Value

Likewise types can have an associated method set.

A type implements an interface by implementing all of the methods in a
interfaces method set.  Of course, all types match an empty interface.

What's we're going to focus on is the syntax for methods:

func (v T) Name() int {

}

Methods host the assocated value out of the signature so that we can talk about
(and compare) what the method does without regard to the type.

So:

var v T

v.Foo(i)

(T).Foo(v, i)

The io package is one of the most often used intefaces -- many functions accept
its interfaces types (typically io.Readers and io.Writers) or implement it's
interface types (http.ResponseWriter, bytes.Buffer, net.Conn, etc.)

So it is helpful to be familiar with all of the tools in the io package can
help you come up with creative and practical soutions to common problems.

Today we'll do a fairly deep dive into the package and work through a few
exercises.

func Copy(dst Writer, src Reader) (written int64, err error)
func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error)
func CopyN(dst Writer, src Reader, n int64) (written int64, err error)

func Pipe() (*PipeReader, *PipeWriter)
func ReadAtLeast(r Reader, buf []byte, min int) (n int, err error)
func ReadFull(r Reader, buf []byte) (n int, err error)
func WriteString(w Writer, s string) (n int, err error)
type ByteReader interface{ ... }
type ByteScanner interface{ ... }
type ByteWriter interface{ ... }
type Closer interface{ ... }
type LimitedReader struct{ ... }
type PipeReader struct{ ... }
type PipeWriter struct{ ... }
type ReadCloser interface{ ... }
type ReadSeeker interface{ ... }
type ReadWriteCloser interface{ ... }
type ReadWriteSeeker interface{ ... }
type ReadWriter interface{ ... }
type Reader interface{ ... }
    func LimitReader(r Reader, n int64) Reader
    func MultiReader(readers ...Reader) Reader
    func TeeReader(r Reader, w Writer) Reader
type ReaderAt interface{ ... }
type ReaderFrom interface{ ... }
type RuneReader interface{ ... }
type RuneScanner interface{ ... }
type SectionReader struct{ ... }
    func NewSectionReader(r ReaderAt, off int64, n int64) *SectionReader
type Seeker interface{ ... }
type StringWriter interface{ ... }
type WriteCloser interface{ ... }
type WriteSeeker interface{ ... }
type Writer interface{ ... }
    func MultiWriter(writers ...Writer) Writer
type WriterAt interface{ ... }
type WriterTo interface{ ... }
